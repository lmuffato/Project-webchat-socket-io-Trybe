<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="http://localhost:3000/socket.io/socket.io.js"></script>
    <title>Webchat</title>
</head>

<body>
    <h1> Webchat</h1>
    <h2 class="online-user"></h2>
    <form>
        <input id="input-nickname" type="text" data-testid="nickname-box" placeholder="Enter a nickname">
        <button id="btn-save-nickname" type="text" data-testid="nickname-button">Salvar apelido</button>
    </form>
    <ul id="online-users" style="border: 1px solid; width: 40%; height: 200px;">

    </ul>
    <div style="display:flex;">

        <ul id="messages" style="border: 1px solid; width: 40%; height: 200px;">

        </ul>
    </div>
    <form>
        <input type="text" placeholder="Enter a message" data-testid="message-box" id="input-message">
        <button data-testid="send-button" id="btn-send-message">Enviar</button>
    </form>
    <script>
        const socket = io('http://localhost:3000');
        const btnSaveNickname = document.querySelector('#btn-save-nickname');
        const inputNickname = document.querySelector('#input-nickname');
        const btnSendMessage = document.querySelector('#btn-send-message');
        const inputMessage = document.querySelector('#input-message');
        const ulMessages = document.querySelector('#messages');
        const onlineUser = document.querySelector('#online-user');
        const onlineUsers = document.querySelector('#online-users');
        const h2OnlineUser = document.querySelector('.online-user');

        const createLi = (data, dataTestId, parent) => {
            const li = document.createElement('li');
            li.setAttribute('data-testid', dataTestId);
            const liText = document.createTextNode(data);
            li.appendChild(liText);
            parent.appendChild(li);
        };

        socket.on('userConnected', (id) => {
            const nicknameWith16caracteres = id.substring(0, 16);
            h2OnlineUser.innerText = nicknameWith16caracteres;
        });

        socket.on('messages', (messages) => {
            messages.forEach((message) => {
                createLi(message, "message", ulMessages);
            });
        });

        socket.on('message', (data) => {
            createLi(data, "message", ulMessages);
        });

        socket.on('users', (users) => {
            onlineUsers.textContent = '';
            const actualUser = h2OnlineUser.textContent;
            createLi(actualUser, "online-user", onlineUsers);
            users.forEach((user) => {
                if (user.nickname !== actualUser) {
                    createLi(user.nickname, "online-user", onlineUsers);
                }
            });
        });

        window.onbeforeunload = () => {
            socket.disconnect();
        };

        const saveNickname = (e) => {
            e.preventDefault();
            h2OnlineUser.innerHTML = inputNickname.value;
            socket.emit('saveNickname', inputNickname.value);
        }

        const sendMessage = (e) => {
            e.preventDefault();
            const chatMessage = inputMessage.value;
            const nickname = h2OnlineUser.innerText;
            socket.emit('message', { chatMessage, nickname });
        };

        btnSaveNickname.addEventListener("click", saveNickname);
        btnSendMessage.addEventListener("click", sendMessage);
    </script>

</body>

</html>